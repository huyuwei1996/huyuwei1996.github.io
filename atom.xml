<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://huyuwei1996.github.io/</id>
    <title>Huyuwei &apos;s Blog</title>
    <updated>2020-06-12T05:44:03.213Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://huyuwei1996.github.io/"/>
    <link rel="self" href="https://huyuwei1996.github.io/atom.xml"/>
    <subtitle>逆水行舟，不进则退</subtitle>
    <logo>https://huyuwei1996.github.io/images/avatar.png</logo>
    <icon>https://huyuwei1996.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Huyuwei &apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[brew安装及替换源]]></title>
        <id>https://huyuwei1996.github.io/_kTuwRSQs/</id>
        <link href="https://huyuwei1996.github.io/_kTuwRSQs/">
        </link>
        <updated>2020-05-30T15:24:42.000Z</updated>
        <content type="html"><![CDATA[<h1 id="brew安装">brew安装</h1>
<h2 id="brew安装-常规安装">brew安装-常规安装</h2>
<h3 id="官网">官网</h3>
<p>https://brew.sh/index_zh-cn</p>
<h3 id="官网安装命令">官网安装命令</h3>
<pre><code class="language-shell">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;
</code></pre>
<h3 id="官网卸载命令">官网卸载命令</h3>
<pre><code class="language-shell">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)&quot;
</code></pre>
<h3 id="常规安装后更换为第三方源">常规安装后，更换为第三方源</h3>
<pre><code class="language-shell"># 中科大源
cd &quot;$(brew --repo)&quot;
git remote set-url origin https://mirrors.ustc.edu.cn/brew.git
cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;
git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git
cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-cask&quot;
git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git
brew update -v
echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' &gt;&gt; ~/.zshrc
source ~/.zshrc

# 阿里源
cd &quot;$(brew --repo)&quot;
git remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git
cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;
git remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git
brew update -v
echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' &gt;&gt; ~/.zshrc
source ~/.zshrc

# 清华源
cd &quot;$(brew --repo)&quot;
git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/homebrew/brew.git
cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;
git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/homebrew/homebrew-core.git
brew update -v
echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' &gt;&gt; ~/.zshrc
source ~/.zshrc

# 复原brew源
cd &quot;$(brew --repo)&quot;
git remote set-url origin https://github.com/Homebrew/brew.git
cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;
git remote set-url origin https://github.com/Homebrew/homebrew-core.git
# 删除zshrc HOMEBREW_BOTTLE_DOMAIN内容
</code></pre>
<h2 id="brew安装-国内安装">brew安装-国内安装</h2>
<p>解决常规安装太慢，或者无法安装（国内有时无法访问raw.githubusercontent.com）。以及brew update很久的问题。</p>
<pre><code class="language-shell">curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused
</code></pre>
<h3 id="国内安装">国内安装</h3>
<pre><code class="language-shell"># 创建HomeBrew文件夹
sudo mkdir /usr/local/Homebrew

# git clone对应源的Homebrew
sudo git clone https://mirrors.ustc.edu.cn/brew.git /usr/local/Homebrew
# sudo git clone https://mirrors.aliyun.com/homebrew/brew.git /usr/local/Homebrew
# sudo git clone https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git /usr/local/Homebrew

# 创建一个快捷方式到/usr/local/bin目录
sudo ln -s /usr/local/Homebrew/bin/brew /usr/local/bin/brew

# 创建core文件夹
sudo mkdir -p /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core

# git clone
sudo git clone https://mirrors.ustc.edu.cn/homebrew-core.git /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core
# sudo git clone https://mirrors.aliyun.com/homebrew/homebrew-core.git /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core
# sudo git clone https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core

# 获取权限 并 更新
sudo chown -R $(whoami) /usr/local/Homebrew
brew update -v

# 设置环境变量
echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles' &gt;&gt; ~/.zshrc 
# echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' &gt;&gt; ~/.zshrc
# echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew/homebrew-bottles' &gt;&gt; ~/.zshrc
source ~/.zshrc

# brew cask
sudo git clone https://mirrors.ustc.edu.cn/homebrew-cask.git /usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask
</code></pre>
<h2 id="brew安装指定版本的软件">brew安装指定版本的软件</h2>
<pre><code class="language-shell"># 查看信息
brew info jmeter
# 根据信息中的From
cd &quot;$(brew --repo)&quot;
cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;
cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-cask&quot;
# 找到对应commitid
git log ./Formula/jmeter.rb | less
# 切换对应版本的commitid
git checkout d1c22f955a754d670e5ebe69eb4d970ed4429aeb
# 查看是否切换到对应版本
cat ./Formula/jmeter.rb
# 安装
brew install ./Formula/jmeter.rb
or
brew install jmeter
</code></pre>
<p>参考网站：</p>
<p>https://blog.csdn.net/u010458765/article/details/104730037/</p>
<p>https://www.jianshu.com/p/aadb54eac0a8</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[基于 Jmeter 的轻量级云压测平台(开源项目使用)]]></title>
        <id>https://huyuwei1996.github.io/ji-yu-jmeter-de-qing-liang-ji-yun-ya-ce-ping-tai-kai-yuan-xiang-mu-shi-yong/</id>
        <link href="https://huyuwei1996.github.io/ji-yu-jmeter-de-qing-liang-ji-yun-ya-ce-ping-tai-kai-yuan-xiang-mu-shi-yong/">
        </link>
        <updated>2020-05-09T02:44:42.000Z</updated>
        <content type="html"><![CDATA[<p>github：[https://github.com/zyanycall/stressTestPlatform]</p>
<p>社区介绍：<a href="https://testerhome.com/topics/15612">基于 Jmeter 的轻量级云压测平台的原理与实现 (一)：开篇</a>  <a href="https://testerhome.com/topics/17259">基于 Jmeter 的轻量级云压测平台的原理与实现 (二)：压测引擎</a></p>
<p>一、项目配置：</p>
<ol>
<li>
<p>项目访问地址：http://10.9.19.108:8080/renren-fast/</p>
</li>
<li>
<p>部署机器：10.9.19.108</p>
</li>
<li>
<p>数据库：mysql，10.9.19.108本地</p>
</li>
<li>
<p>服务日志查看：</p>
<p>cd /usr/local/tomcat/tomcat-8/logs</p>
<p>sudo tail -f catalina.out</p>
</li>
<li>
<p>访问日志查看（年月日）：</p>
<p>cd /usr/local/tomcat/tomcat-8/logs</p>
<p>sudo tail -f localhost_access_log.xxxx-xx-xx.txt</p>
</li>
</ol>
<p>二、环境搭建：</p>
<ol>
<li>mysql 5.7安装</li>
</ol>
<pre><code class="language-shell"># 下载mysql rpm包
cd ~/soft
wget -N http://repo.mysql.com/mysql80-community-release-el7-3.noarch.rpm
# 安装下载的rpm包
sudo yum localinstall mysql80-community-release-el7-3.noarch.rpm
或
sudo rpm -Uvh mysql80-community-release-el7-3.noarch.rpm
# 找到要安装的版本
yum repolist all | grep mysql
# 【如果遇到yum-config-manager: command not found】
sudo yum install yum-utils -y
# 修改为需要的版本
sudo yum-config-manager --disable mysql80-community
sudo yum-config-manager --enable mysql57-community
或
手动编辑/etc/yum.repos.d/mysql-community.repo文件来选择，把默认版本的enabled=1改为0，需要版本的enabled=1
# 安装mysql（安装后是mysql 5.7.30）
sudo yum install mysql-community-server
# 【如果原来安装过】删除原来安装过的mysql残留的数据
sudo rm -rf /var/lib/mysql
# 启动服务
sudo systemctl restart mysqld
# 5.7版本mysql第一次启动自动生成临时密码，可通过查看日志找到
grep 'temporary password' /var/log/mysqld.log
# 修改密码校验
sudo vi /etc/my.cnf

plugin-load=validate_password.so 
validate-password=OFF
# 安全配置
sudo mysql_secure_installation
#################################################
Change the password for root ? ((Press y|Y for Yes, any other key for No) :No
Remove anonymous users? (Press y|Y for Yes, any other key for No) :y
Disallow root login remotely? (Press y|Y for Yes, any other key for No) :No
Remove test database and access to it? (Press y|Y for Yes, any other key for No) :y
Reload privilege tables now? (Press y|Y for Yes, any other key for No) :y
</code></pre>
<ol start="2">
<li>maven 3.6.3安装</li>
</ol>
<pre><code class="language-shell">#http://maven.apache.org/download.cgi
cd ~/soft
wget -N https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.zip
unzip apache-maven-3.6.3-bin.zip
mv apache-maven-3.6.3 maven-3.6.3

# 统一安装到/usr/local目录
sudo mkdir /usr/local/maven
sudo mv ~/soft/maven-3.6.3 /usr/local/maven

sudo vi /etc/profile
#################################################
export PATH=/usr/local/maven/maven-3.6.3/bin:$PATH
#################################################
source /etc/profile
</code></pre>
<ol start="3">
<li>tomcat 8.5.54安装</li>
</ol>
<pre><code class="language-shell">#https://tomcat.apache.org/download-80.cgi
cd ~/soft
wget -N https://mirror.bit.edu.cn/apache/tomcat/tomcat-8/v8.5.54/bin/apache-tomcat-8.5.54.zip
unzip apache-tomcat-8.5.54.zip
mv apache-tomcat-8.5.54 tomcat-8

# 统一安装到/usr/local目录
sudo mkdir /usr/local/tomcat
sudo mv ~/soft/tomcat-8 /usr/local/tomcat

cd /usr/local/tomcat/tomcat-8/bin
chmod 755 *.sh
./startup.sh
# 看一下localhost:8080有没有tomcat猫
vi catalina.sh
# 145gg
#################################################
CATALINA_PID=$PRGDIR/CATALINA_PID
#################################################
./shutdown.sh
./startup.sh
# 开机自启动
sudo vi /usr/lib/systemd/system/tomcat.service
#################################################
[Unit]
Description=tomcat
After=syslog.target network.target remote-fs.target nss-lookup.target

[Service]
Type=forking
PIDFile=/usr/local/tomcat/tomcat-8/bin/CATALINA_PID
ExecStart=/usr/local/tomcat/tomcat-8/bin/startup.sh
ExecReload=/bin/kill -s HUP $MAINPID
ExecStop=/bin/kill -s QUIT $MAINPID
PrivateTmp=true

[Install]
WantedBy=multi-user.target
#################################################
# 启用开机自启
sudo systemctl enable tomcat.service
# 启动tomcat服务
sudo systemctl restart tomcat.service
</code></pre>
<ol start="4">
<li>拉取项目&amp;war部署</li>
</ol>
<pre><code class="language-shell">#【启动项目报错无法解析hostname】
sudo sudo su -
echo &quot;127.0.0.1 VM108&quot; &gt;&gt; /etc/hosts

# 拉取项目
cd /soft
git clone -b vm https://github.com/huyuwei1996/stressTestPlatform.git
cd stressTestPlatform
mvn clean package -f pom-war.xml
# war拷贝到webapps自动部署
cp target/renren-fast.war /usr/local/tomcat/tomcat-8/webapps

</code></pre>
<ol start="5">
<li>更新项目</li>
</ol>
<pre><code class="language-shell"># 更新项目
cd ~/soft/stressTestPlatform
git pull
mvn clean package -f pom-war.xml
# war拷贝到webapps自动部署
cp target/renren-fast.war /usr/local/tomcat/tomcat-8/webapps
</code></pre>
<p>三、其他问题：</p>
<ol>
<li>jmeter配置相关
<ol>
<li>不需要自己启动jmeter-server，平台上可以配置并启动</li>
<li>可能需要修改jmeter.properties的csv输入，目前生成报告有的会出错</li>
</ol>
</li>
</ol>
<pre><code class="language-shell">sudo systemctl disable jmeter-server.service # 禁用服务自启动
sudo systemctl stop jmeter-server.service # 停掉当前服务


sudo vi /etc/bashrc
##################################################
export JMETER_HOME=/usr/local/jmeter/apache-jmeter-5.2.1
export CLASSPATH=$JMETER_HOME/lib/ext/ApacheJMeter_core.jar:$JMETER_HOME/lib/jorphan.jar:$CLASSPATH
export PATH=$JMETER_HOME/bin:$PATH

export PATH=/usr/local/maven/maven-3.6.3/bin:$PATH
##################################################


</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[性能测试机环境搭建]]></title>
        <id>https://huyuwei1996.github.io/xing-neng-ce-shi-ji-huan-jing-da-jian/</id>
        <link href="https://huyuwei1996.github.io/xing-neng-ce-shi-ji-huan-jing-da-jian/">
        </link>
        <updated>2020-05-06T07:39:58.000Z</updated>
        <content type="html"><![CDATA[<p>备注：主机系统为CentOS 7</p>
<h1 id="建议先更新机器的yum源">建议先更新机器的yum源</h1>
<pre><code class="language-shell">sudo yum update -y
</code></pre>
<h1 id="修改主机名称">修改主机名称</h1>
<pre><code class="language-shell">sudo hostnamectl set-hostname PM133
echo &quot;127.0.0.1 PM133&quot; &gt;&gt; /etc/hosts
</code></pre>
<h1 id="安装java">安装Java</h1>
<h2 id="下载oracle-jdk18">下载Oracle JDK1.8</h2>
<p>由于现在需要登录下载，先从浏览器中点击下载后，将链接复制替换下面的地址</p>
<pre><code class="language-shell">#【如果用不了wget，安装一个】
sudo yum install wget -y

# 下载Oracle JDK的rpm包
wget -N --no-cookies --no-check-certificate --header &quot;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&quot; &quot;https://download.oracle.com/otn/java/jdk/8u251-b08/3d5a2bb8f8d4428bbe94aed7ec7ae784/jdk-8u251-linux-x64.rpm?AuthParam=xxxxxxxxxxxxxxxx&quot;
</code></pre>
<h2 id="安装jdk">安装JDK</h2>
<pre><code class="language-shell">sudo yum install jdk-8u251-linux-x64.rpm -y
</code></pre>
<h2 id="配置默认java">配置默认Java</h2>
<p>如果机器没有预装OpenJDK，就可以略过此步骤</p>
<pre><code class="language-shell">/usr/sbin/alternatives --config java
/usr/sbin/alternatives --config javac
</code></pre>
<p>命令输入后有对应的菜单选择，选择安装的Oracle JDK即可</p>
<h2 id="测试java安装情况">测试Java安装情况</h2>
<pre><code class="language-shell">java -version
javac -version
</code></pre>
<p>预期结果</p>
<pre><code class="language-shell">~ java -version
java version &quot;1.8.0_251&quot;
Java(TM) SE Runtime Environment (build 1.8.0_251-b08)
Java HotSpot(TM) 64-Bit Server VM (build 25.251-b08, mixed mode)
~ javac -version
javac 1.8.0_251
</code></pre>
<h1 id="安装gafana-server在仪表盘的服务器上安装">安装gafana-server（在仪表盘的服务器上安装）</h1>
<h2 id="下载和安装grafana">下载和安装grafana</h2>
<pre><code class="language-shell">wget https://dl.grafana.com/oss/release/grafana-6.7.3-1.x86_64.rpm
sudo yum install grafana-6.7.3-1.x86_64.rpm -y
</code></pre>
<h2 id="修改匿名可直接查看展示重启服务">修改匿名可直接查看展示&amp;重启服务</h2>
<pre><code class="language-shell">sudo vi /etc/grafana/grafana.ini
## 修改配置成如下状态：
#################################################
[auth.anonymous]
# enable anonymous access
enabled = true

# specify organization name that should be used for unauthenticated users
;org_name = Main Org.

# specify role for unauthenticated users
org_role = Viewer
#################################################
## 重启服务
sudo systemctl restart grafana-server
</code></pre>
<h1 id="添加influx源所有服务器">添加influx源（所有服务器）</h1>
<pre><code class="language-shell">cat &lt;&lt;EOF | sudo tee /etc/yum.repos.d/influxdb.repo
[influxdb]
name = InfluxDB Repository - RHEL \$releasever
baseurl = https://repos.influxdata.com/rhel/\$releasever/\$basearch/stable
enabled = 1
gpgcheck = 1
gpgkey = https://repos.influxdata.com/influxdb.key
EOF
</code></pre>
<h1 id="安装influxdb在负责收集数据的服务器上安装">安装influxdb（在负责收集数据的服务器上安装）</h1>
<h2 id="安装influxdb">安装influxdb</h2>
<pre><code class="language-shell">sudo yum install influxdb -y
</code></pre>
<h2 id="influxdb配置修改重启服务">influxdb配置修改&amp;重启服务</h2>
<pre><code class="language-shell">sudo vi /etc/influxdb/influxdb.conf
## 找到[[udp]]处添加udp配置
## 使用?[[udp]]回车直接找到这行
#################################################
[[udp]]
  # High-traffic UDP
  enabled = true
  bind-address = &quot;:8089&quot; # the bind address
  database = &quot;udp&quot; # Name of the database that will be written to
  batch-size = 5000 # will flush if this many points get buffered
  batch-timeout = &quot;1s&quot; # will flush at least this often even if the batch-size is not reached
  batch-pending = 100 # number of batches that may be pending in memory
  read-buffer = 8388608 # (8*1024*1024) UDP read buffer size
#################################################
## 重启服务
sudo systemctl restart influxdb
## 查看服务运行状态（详细）
sudo systemctl status influxdb -l
</code></pre>
<h1 id="安装telegraf在需要监控的服务器上安装">安装telegraf（在需要监控的服务器上安装）</h1>
<h2 id="安装telegraf">安装telegraf</h2>
<pre><code class="language-shell">sudo yum install telegraf -y
</code></pre>
<h2 id="telegraf配置修改重启服务">telegraf配置修改&amp;重启服务</h2>
<pre><code class="language-shell">sudo vi /etc/telegraf/telegraf.conf
## 使用111gg命令直接找到这行
### 监控数据通过http写到数据库的配置：
#################################################
  # urls = [&quot;udp://10.9.8.129:8089&quot;]
  urls = [&quot;http://10.9.8.129:8086&quot;]
### 监控数据通过udp写到数据库的配置：
  urls = [&quot;udp://10.9.8.129:8089&quot;]
  # urls = [&quot;http://10.9.8.129:8086&quot;]
### 如果是监控机器写到自己的influxdb时，url写127.0.0.1，如：
 # urls = [&quot;udp://127.0.0.1:8089&quot;]
  urls = [&quot;http://127.0.0.1:8086&quot;]
#################################################
## http写入时的数据库名称
database = &quot;telegraf&quot;前面去掉#号

## 添加netstat监控
## 使用?inputs.netstat回车直接找到这行
[[inputs.netstat]]前面去掉#号

## 修改net监控
## 使用?inputs.net]回车直接找到这行
[[inputs.net]]前面去掉#号
interfaces = [&quot;e*&quot;, &quot;lo&quot;]   # 修改网卡名称的匹配

## 重启服务
sudo systemctl restart telegraf
</code></pre>
<h1 id="关闭防火墙防火墙开机自启关掉后就可以访问grafana-server的3000端口了">关闭防火墙&amp;防火墙开机自启（关掉后就可以访问grafana-server的3000端口了）</h1>
<pre><code class="language-shell">## 查看防火墙
firewall-cmd --state
## 关闭firewall
systemctl stop firewalld.service
systemctl disable firewalld.service

## 或者开放3000端口
firewall-cmd --zone=public --add-port=3000/tcp --permanent
firewall-cmd --reload
firewall-cmd --zone=public --query-port=3000/tcp
firewall-cmd --zone=public --list-ports
</code></pre>
<h1 id="服务器时区问题坑">服务器时区问题(坑)</h1>
<pre><code class="language-shell">## 访问http://ip:3000 看不到数据
sudo ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime -f
# 再看下时间对不对
date
</code></pre>
<h1 id="修改系统限制">修改系统限制</h1>
<h2 id="设定每个进程可以打开的最大文件描述符的数量">设定每个进程可以打开的最大文件描述符的数量</h2>
<pre><code class="language-shell">## dev下修改系统参数，切root就不用输dev密码了
sudo sudo su -

ulimit -n 65535
</code></pre>
<h2 id="修改内核参数">修改内核参数</h2>
<pre><code class="language-shell">sudo vi /etc/sysctl.conf
#################################################
#表示开启SYN Cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭
net.ipv4.tcp_syncookies = 1
#表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭
net.ipv4.tcp_tw_reuse = 1
#表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭
net.ipv4.tcp_tw_recycle = 1
#表示如果套接字由本端要求关闭，这个参数决定了它保持在FIN-WAIT-2状态的时间
net.ipv4.tcp_fin_timeout=30
#表示当keepalive起用的时候，TCP发送keepalive消息的频度。缺省是2小时，改为20分钟
net.ipv4.tcp_keepalive_time = 1200 
#表示用于向外连接的端口范围。缺省情况下很小：32768到61000，改为1024到65000
net.ipv4.ip_local_port_range = 1024 65000 
#表示SYN队列的长度，默认为1024，加大队列长度为8192，可以容纳更多等待连接的网络连接数
net.ipv4.tcp_max_syn_backlog = 8192 
#表示系统同时保持TIME_WAIT套接字的最大数量，如果超过这个数字，TIME_WAIT套接字将立刻被清除并打印警告信息。默认为180000，改为5000。对于Apache、Nginx等服务器，上几行的参数可以很好地减少TIME_WAIT套接字数量，但是对于 Squid，效果却不大。此项参数可以控制TIME_WAIT套接字的最大数量，避免Squid服务器被大量的TIME_WAIT套接字拖死。
net.ipv4.tcp_max_tw_buckets = 5000
#################################################
## 立即生效（免重启）
sudo sysctl -p
</code></pre>
<h2 id="提高线程的使用限制">提高线程的使用限制</h2>
<pre><code class="language-shell">echo 999999 &gt; /proc/sys/kernel/pid_max
echo 1999999 &gt; /proc/sys/vm/max_map_count
</code></pre>
<h1 id="安装jmeter">安装Jmeter</h1>
<h2 id="下载jmeter这里下载最新的521">下载Jmeter（这里下载最新的5.2.1）</h2>
<pre><code class="language-shell">## 这里我们放在soft目录下
mkdir soft &amp;&amp; cd soft
## https://jmeter.apache.org/download_jmeter.cgi
wget -N https://mirror.bit.edu.cn/apache//jmeter/binaries/apache-jmeter-5.2.1.zip
</code></pre>
<h2 id="解压配置环境变量">解压&amp;配置环境变量</h2>
<pre><code class="language-shell">unzip apache-jmeter-5.2.1.zip
## 如果提示不能用unzip命令
sudo yum install zip unzip -y
# 安装到/usr/local目录
sudo mkdir /usr/local/jmeter/
sudo mv apache-jmeter-5.2.1 /usr/local/jmeter

## 修改环境变量&amp;激活环境变量
sudo vi /etc/profile
#################################################
export JMETER_HOME=/usr/local/jmeter/apache-jmeter-5.2.1
export CLASSPATH=$JMETER_HOME/lib/ext/ApacheJMeter_core.jar:$JMETER_HOME/lib/jorphan.jar:$CLASSPATH
export PATH=$JMETER_HOME/bin:$PATH
#################################################
source /etc/profile
</code></pre>
<h2 id="测试jmeter安装情况">测试Jmeter安装情况</h2>
<pre><code class="language-shell">jmeter -v
</code></pre>
<p>预期结果</p>
<pre><code class="language-shell">~ jmeter -v
    _    ____   _    ____ _   _ _____       _ __  __ _____ _____ _____ ____
   / \  |  _ \ / \  / ___| | | | ____|     | |  \/  | ____|_   _| ____|  _ \
  / _ \ | |_) / _ \| |   | |_| |  _|    _  | | |\/| |  _|   | | |  _| | |_) |
 / ___ \|  __/ ___ \ |___|  _  | |___  | |_| | |  | | |___  | | | |___|  _ &lt;
/_/   \_\_| /_/   \_\____|_| |_|_____|  \___/|_|  |_|_____| |_| |_____|_| \_\ 5.2.1

Copyright (c) 1999-2019 The Apache Software Foundation
</code></pre>
<h2 id="修改jmeter的jvm参数">修改Jmeter的JVM参数</h2>
<h3 id="修改jmetersh和jmeterwin修改jmeterbat">修改jmeter.sh和jmeter，win修改jmeter.bat</h3>
<pre><code class="language-shell">cd $JMETER_HOME/bin #/usr/local/jmeter/apache-jmeter-5.2.1/bin
vi jmeter.sh
或
vi jmeter
</code></pre>
<h3 id="heap最多设置为物理内存的一半8g机器设置4g16g机器设置8g">heap最多设置为物理内存的一半，8G机器设置4G，16G机器设置8G</h3>
<pre><code class="language-shell">JVM_ARGS=&quot;-Xms4G -Xmx4G -Xmn512m&quot;
JVM_ARGS=&quot;-Xms8G -Xmx8G -Xmn512m&quot;
</code></pre>
<h3 id="修改每线程占用的栈空间目前没改">修改每线程占用的栈空间（目前没改）</h3>
<pre><code class="language-shell">JVM_ARGS=&quot;-XX:ThreadStackSize=400k&quot;
</code></pre>
<p>每线程使用400KB的栈空间，比缺省的1MB节省了约60%，但是实际上在运行过程中，栈空间的使用也不完全是线性的，具体的节省下来的栈空间需要通过试验。</p>
<h2 id="修改jmeter-server">修改jmeter-server</h2>
<h3 id="先用ifconfig找下网卡名称比如是em1win修改jmeter-serverbat">先用ifconfig找下网卡名称，比如是em1，win修改jmeter-server.bat</h3>
<pre><code class="language-shell">vi jmeter-server

# 添加下面内容到最后一行的前面即可
#################################################
ip=`ifconfig em1 | awk -F &quot;[ :]+&quot; 'NR==2{print $3}'`
RMI_HOST_DEF=-Djava.rmi.server.hostname=$ip
#################################################
nwCard=`ifconfig | awk -F'[ :]+' '!NF{if(eth!=&quot;&quot;&amp;&amp;ip==&quot;&quot;)print eth;eth=ip4=&quot;&quot;}/^[^ ]/{eth=$1}/inet addr:/{ip=$4}' | awk 'NR==1'`
ip=`ifconfig $nwCard | awk -F &quot;[ :]+&quot; 'NR==2{print $3}'`
RMI_HOST_DEF=-Djava.rmi.server.hostname=$ip
#################################################
</code></pre>
<h2 id="修改主控机jmeterproperties">修改主控机jmeter.properties</h2>
<pre><code class="language-shell">vi jmeter.properties

## 258gg找到这行，如果有多台代理机，这里需要把所有的代理机的IP地址和端口号都加入进来
#################################################
remote_hosts=127.0.0.1,10.9.8.133
server.rmi.ssl.disable=true
#################################################
</code></pre>
<h2 id="slave机器jmeter-server启动关闭脚本jmeter-server自启动">slave机器：jmeter-server启动/关闭脚本&amp;jmeter-server自启动</h2>
<pre><code class="language-shell">## 启动脚本
sudo vi /usr/local/jmeter/startup.sh
#################################################
#! /bin/sh
source /etc/profile
cd /usr/local/jmeter/
rm -f jmeter-server.log
jmeter-server &amp;
exit
#################################################
</code></pre>
<pre><code class="language-shell">## 关闭脚本
sudo vi /usr/local/jmeter/shutdown.sh
#################################################
#! /bin/sh
str=`ps -ef | grep jmeter-server | grep -v &quot;grep&quot;|awk '{print $2}'`
kill -9 $str
if [ &quot;$?&quot; -eq 0 ]; then
	echo &quot;killed pid is &quot;$str
    echo &quot;kill success&quot;
else
    echo &quot;kill failed&quot;
fi
#################################################

# 脚本赋权
cd /usr/local/jmeter/
sudo chmod 755 *.sh
## 添加自启动服务
sudo vi /usr/lib/systemd/system/jmeter-server.service
#################################################
[Unit]
Description=jmeter-server project
After=jmeter-server.service
  
[Service]
Type=forking
User=root
Group=root
ExecStart=/usr/local/jmeter/startup.sh
ExecReload=
ExecStop=/usr/local/jmeter/shutdown.sh
PrivateTmp=true
  
[Install]
WantedBy=multi-user.target
#################################################
## 赋权限，激活服务（设置自启动）,其实不用赋权也行
sudo chmod 754 /usr/lib/systemd/system/jmeter-server.service
sudo systemctl enable jmeter-server.service

## 其他相关命令
sudo systemctl start jmeter-server  # 启动服务
sudo systemctl stop jmeter-server # 停止服务
sudo systemctl status jmeter-server # 查看服务运行
sudo systemctl restart jmeter-server # 重启服务

sudo systemctl disable jmeter-server.service # 禁用服务自启动
</code></pre>
<h2 id="主控机执行时">主控机执行时：</h2>
<pre><code class="language-shell">jmeter -n -t test.jmx -R server1IP,server2IP
## 例：
jmeter -n -t test.jmx -R 10.9.8.133
</code></pre>
<h1 id="公司机器切root用户方式">公司机器切root用户方式</h1>
<pre><code class="language-shell">## 不知道怎么配置的，反正需要2个sudo
sudo sudo su -
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[iterm2配置lrzsz]]></title>
        <id>https://huyuwei1996.github.io/iterm2-pei-zhi-lrzsz/</id>
        <link href="https://huyuwei1996.github.io/iterm2-pei-zhi-lrzsz/">
        </link>
        <updated>2020-04-30T06:28:48.000Z</updated>
        <content type="html"><![CDATA[<h1 id="下载脚本">下载脚本</h1>
<p>将iterm2-send-zmodem.sh &amp; iterm2-recv-zmodem.sh放到/usr/local/bin/</p>
<pre><code>git clone https://github.com/huyuwei1996/iterm2-zmodem.git
cd iterm2-zmodem
cp *.sh /usr/local/bin
</code></pre>
<h1 id="配置iterm2-trigger">配置iterm2 Trigger</h1>
<p>选择Profiles &gt; Default &gt; Advanced &gt; Triggers &gt; Edit</p>
<h2 id="发送-sz">发送 sz</h2>
<pre><code>Regular expression: rz waiting to receive.\*\*B0100 (注意这里是这样)
Action: Run Silent Coprocess
Parameters: /usr/local/bin/iterm2-send-zmodem.sh
</code></pre>
<h2 id="接收-rz">接收 rz</h2>
<pre><code>Regular expression:\*\*B00000000000000
Action: Run Silent Coprocess
Parameters: /usr/local/bin/iterm2-recv-zmodem.sh
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JPype1 - python2.7下mac和win安装解决]]></title>
        <id>https://huyuwei1996.github.io/jpype1-python27-xia-mac-he-win-an-zhuang-jie-jue/</id>
        <link href="https://huyuwei1996.github.io/jpype1-python27-xia-mac-he-win-an-zhuang-jie-jue/">
        </link>
        <updated>2020-04-13T07:29:21.000Z</updated>
        <content type="html"><![CDATA[<h1 id="直接指定版本安装">直接指定版本安装</h1>
<p>python2.7就安装0.7.1及其以下版本</p>
<pre><code>pip2 install jpype1==0.7.1
or
pip2 install jpype1==0.7.0
</code></pre>
<h2 id="win通过压缩包安装">win通过压缩包安装</h2>
<p><code>pip2 install jpype1</code>安装失败<br>
在<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#jpype">https://www.lfd.uci.edu/~gohlke/pythonlibs/#jpype</a> 下载cp27也就是对应python2.7的<br>
<img src="https://huyuwei1996.github.io//post-images/1586763262234.png" alt="" loading="lazy"><br>
然后使用<code>pip2 install JPype1-0.7.1-cp27-cp27m-win_amd64.whl</code>安装</p>
<h2 id="mac通过编译安装">mac通过编译安装</h2>
<p><code>pip2 install jpype1</code>安装失败<br>
在<a href="https://github.com/jpype-project/jpype/releases">https://github.com/jpype-project/jpype/releases</a> 下载v0.7.1的Source code<br>
(zip)<br>
因为0.7.2开始不支持python2.7，所以安装时候会一直报错。<br>
这里选择下载源码解压后，直接编译安装</p>
<pre><code>cd JPype1-0.7.1
python2 setup.py install
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[记一次libimobiledevice安装问题]]></title>
        <id>https://huyuwei1996.github.io/ji-yi-ci-libimobiledevice-an-zhuang-wen-ti/</id>
        <link href="https://huyuwei1996.github.io/ji-yi-ci-libimobiledevice-an-zhuang-wen-ti/">
        </link>
        <updated>2020-04-13T07:12:26.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://huyuwei1996.github.io//post-images/1586762260492.png" alt="" loading="lazy"><br>
直接记录下结果吧，图中3f64bbdc857512944b5bc7bb36f4d59191c25d14一直编译报错，afc.c的问题。</p>
<pre><code>brew install -v --HEAD libimobiledevice
# 安装失败后，切换上一个commit
cd /Users/huyuwei/Library/Caches/Homebrew/libimobiledevice--git
git checkout c0576790378daa45d43335d44c5caff04c270c94
brew install gnutls
brew install libgcrypt
./autogen.sh --disable-openssl
make
make install
</code></pre>
<p>解决经过：</p>
<pre><code>brew install -v --HEAD libimobiledevice
# 安装新版时候，中间安装了依赖python@3.8，和openssl@1.1，brew自动安装失败后，尝试以下命令依然失败
brew install -v --HEAD --fetch --build-from-source libimobiledevice
# 后面打算手动编译，链接相关依赖库
cd /Users/huyuwei/Library/Caches/Homebrew/libimobiledevice--git
export LDFLAGS=&quot;-L/usr/local/opt/python@3.8/lib:$LDFLAGS&quot;
export LDFLAGS=&quot;-L/usr/local/opt/openssl@1.1/lib:$LDFLAGS&quot;
export CPPFLAGS=&quot;-I/usr/local/opt/openssl@1.1/include&quot;
./autogen.sh
# 提示openssl版本不对(如下)，可能是这里LDFLAGS设置的问题，不太会弄
checking for openssl &gt;= 0.9.8... no
configure: error: OpenSSL support explicitly requested but OpenSSL could not be found
# 最后找到一种方式
brew install gnutls
brew install libgcrypt
./autogen.sh --disable-openssl
make
make install
</code></pre>
<p>然后ideviceinstaller这个终于恢复正常了<br>
<img src="https://huyuwei1996.github.io//post-images/1586763744560.png" alt="" loading="lazy"></p>
<p>第二天的新commit解决了这个问题。cf5a60d75c2108261a6e848b352f798c1422349c<br>
这么倒霉的事情刚好遇到了，我还硬装上了，太累了🙁</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sublime Text常用插件记录]]></title>
        <id>https://huyuwei1996.github.io/sublime-text-chang-yong-cha-jian-ji-lu/</id>
        <link href="https://huyuwei1996.github.io/sublime-text-chang-yong-cha-jian-ji-lu/">
        </link>
        <updated>2020-04-10T03:40:25.000Z</updated>
        <content type="html"><![CDATA[<h6 id="常用package">常用Package</h6>
<blockquote>
<p>Package Control<br>
ConvertToUTF8(支持GBK)<br>
Codecs33(支持GB2312)<br>
HTML-CSS-JS Prettify<br>
Keymaps<br>
MarkdownTOC<br>
Nodejs<br>
Python 3<br>
PackageResourceViewer<br>
SideBarEnhancements<br>
Material Theme<br>
Theme - Monokai Pro</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python判断系统类型]]></title>
        <id>https://huyuwei1996.github.io/python-pan-duan-xi-tong-lei-xing/</id>
        <link href="https://huyuwei1996.github.io/python-pan-duan-xi-tong-lei-xing/">
        </link>
        <updated>2020-04-10T03:40:12.000Z</updated>
        <content type="html"><![CDATA[<h2 id="osname">os.name</h2>
<p>该变量返回当前操作系统的类型</p>
<pre><code class="language-python">import os
print(os.name)
</code></pre>
<table>
<thead>
<tr>
<th style="text-align:center">系统</th>
<th style="text-align:center">返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">linux</td>
<td style="text-align:center">posix</td>
</tr>
<tr>
<td style="text-align:center">windows</td>
<td style="text-align:center">nt</td>
</tr>
<tr>
<td style="text-align:center">java虚拟机</td>
<td style="text-align:center">java</td>
</tr>
</tbody>
</table>
<h2 id="sysplatform">sys.platform</h2>
<p>该变量返回当前系统的平台标识</p>
<pre><code class="language-python">import sys
print(sys.platform)
</code></pre>
<table>
<thead>
<tr>
<th style="text-align:center">系统</th>
<th style="text-align:center">返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">linux</td>
<td style="text-align:center">linux</td>
</tr>
<tr>
<td style="text-align:center">windows</td>
<td style="text-align:center">win32</td>
</tr>
<tr>
<td style="text-align:center">windows/cygwin</td>
<td style="text-align:center">cygwin</td>
</tr>
<tr>
<td style="text-align:center">mac os x</td>
<td style="text-align:center">darwin</td>
</tr>
</tbody>
</table>
<h2 id="platformsystem">platform.system()</h2>
<p>返回当前操作系统的名字</p>
<pre><code class="language-python">import platform
print(platform.system())
</code></pre>
<p>例如Linux，Windows，Java，Darwin，...</p>
<pre><code>platform.platform()     #获取操作系统名称及版本号，如'Darwin-19.2.0-x86_64-i386-64bit'

platform.version()        #获取操作系统版本号，如'Darwin Kernel Version 19.2.0: Sat Nov  9 03:47:04 PST 2019; root:xnu-6153.61.1~20/RELEASE_X86_64'

platform.architecture()    #获取操作系统的位数，如('64bit', '')

platform.machine()     #计算机类型，如'x86_64'

platform.node()          #计算机的网络名称

platform.processor()    #计算机处理器信息，如'i386'

platform.uname()        #包含上面所有的信息汇总
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[oh-my-zsh安装]]></title>
        <id>https://huyuwei1996.github.io/oh-my-zsh-an-zhuang/</id>
        <link href="https://huyuwei1996.github.io/oh-my-zsh-an-zhuang/">
        </link>
        <updated>2020-04-10T03:39:41.000Z</updated>
        <content type="html"><![CDATA[<h2 id="安装步骤">安装步骤</h2>
<ol>
<li>zsh安装</li>
<li>oh-my-zsh安装、高亮&amp;自动补全插件安装</li>
<li>autojump插件安装</li>
</ol>
<h2 id="安装脚本">安装脚本</h2>
<p>MacOS:<br>
mac自带zsh</p>
<pre><code>sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;

git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting

brew install autojump

sed -i &quot;&quot; &quot;s/plugins=(git)/plugins=(git zsh-autosuggestions zsh-syntax-highlighting autojump)/g&quot; ~/.zshrc
source ~/.zshrc
</code></pre>
<p>Ubuntu:</p>
<pre><code>sudo apt update -y
sudo apt install zsh -y
sudo apt install git -y

sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;

git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting

sudo apt install autojump -y

sed -i &quot;s/plugins=(git)/plugins=(git zsh-autosuggestions zsh-syntax-highlighting autojump)/g&quot; ~/.zshrc
source ~/.zshrc
</code></pre>
<p>CentOS:</p>
<pre><code>sudo yum update -y
sudo yum install zsh -y
sudo yum install git -y

sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;

git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting

sudo yum install -y autojump-zsh

sed -i &quot;s/plugins=(git)/plugins=(git zsh-autosuggestions zsh-syntax-highlighting autojump)/g&quot; ~/.zshrc
source ~/.zshrc
</code></pre>
<h3 id="其他配置">其他配置</h3>
<p>如果没有切换shell成功<br>
<code>chsh -s /bin/zsh</code><br>
常显主机名hostname<br>
<code>echo &quot;PROMPT=%m\ \$PROMPT&quot; &gt;&gt; .zshrc</code><br>
常显用户名和主机名<br>
<code>echo &quot;PROMPT=\$USER@%m\ \$PROMPT&quot; &gt;&gt; .zshrc</code><br>
生效<br>
<code>source .zshrc</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac launchctl 启动进程]]></title>
        <id>https://huyuwei1996.github.io/mac-launchctl-qi-dong-jin-cheng/</id>
        <link href="https://huyuwei1996.github.io/mac-launchctl-qi-dong-jin-cheng/">
        </link>
        <updated>2020-04-10T03:39:04.000Z</updated>
        <content type="html"><![CDATA[<h1>plist文件分布</h1>
<pre><code class="">/System/Library/LaunchDaemons/ （System-wide daemons provided by OS X）
其中 apache的httpd程序启动配置文件 org.apache.httpd.plist 就在这里。

/System/Library/LaunchAgents/ （由Mac OS X为用户定义的任务项）

/Library/LaunchDaemons （由管理员定义的守护进程任务项 ）

/Library/LaunchAgents （由管理员为用户定义的任务项 ）
如果放到/Library/LaunchAgents/下面的话，就是一开机就启动哦～

~/Library/LaunchAgents （ 由用户自己定义的任务项 ）
</code></pre>
<h1>launchctl 常用命令</h1>
<pre><code class="">1.显示当前的启动脚本
launchctl list

2.开机时自动启动Apache服务器
sudo launchctl load -w /System/Library/LaunchDaemons/org.apache.httpd.plist

3.设置开机启动并立即启动改服务
launchctl load -w   **.pist 

4. 设置开机启动但不立即启动服务 
launchctl load **.pist 

5. 停止正在运行的启动脚本
sudo launchctl unload [path/to/script]
6. 再加上-w选项即可去除开机启动
sudo launchctl unload -w [path/to/script]
</code></pre>]]></content>
    </entry>
</feed>